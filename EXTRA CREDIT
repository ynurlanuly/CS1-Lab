#  1 LONGEST PALINDROMIC SUBSTRING
class Solution(object):
   def longestPalindrome(self, s):
      dp = [[False for i in range(len(s))] for i in range(len(s))]
      for i in range(len(s)):
         dp[i][i] = True
      max_length = 1
      start = 0
      for l in range(2,len(s)+1):
         for i in range(len(s)-l+1):
            end = i+l
            if l==2:
               if s[i] == s[end-1]:
                  dp[i][end-1]=True
                  max_length = l
                  start = i
            else:
               if s[i] == s[end-1] and dp[i+1][end-2]:
                  dp[i][end-1]=True
                  max_length = l
                  start = i
      return s[start:start+max_length]
ob1 = Solution()
print(ob1.longestPalindrome("ABBABBC"))

# 2 UNIQUE QUADRUPLETS
class solution():
  def fourSum(self, nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: List[List[int]]
    """
    d = dict()
    for i in range(len(nums)):
      for j in range(i+1, len(nums)):
        sum2 = nums[i] + nums[j]
        if sum2 in d:
          d[sum2].append((i,j))
        else:
          d[sum2] = [(i,j)]
    
    result = set()
    for key in d:
      value = target - key
      if value in d:
        list1 = d[key]
        list2 = d[value]
        for (i,j) in list1:
          for (k,l) in list2:
            if i!=k and i!=l and j!=k and j!=l:
              flist = [nums[i], nums[j], nums[k], nums[l]]
              flist.sort()
              result.add(tuple(flist))
    return list(result)

x = solution()
print(x.fourSum([1, 0, -1, 0, -2, 2], 0))
